#!/usr/bin/env python
# Copyright (c) 2014 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import logging
import argparse
import sys
import traceback

import launchpadstats.common
import launchpadstats.tables


logging.basicConfig()
LOG = logging.getLogger('launchpadstats')

DESCRIPTION = "Get Launchpad statistics trough Stackalytics and create" \
              " various types of tables out of them."


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="Show logging output.")
    parser.add_argument('-c', '--config', required=True,
                        help="Configuration file, by default use 'config.ini'"
                        " in the project directory.")
    parser.add_argument('-t', '--table-name',
                        help="Which section name in the config file to use. If"
                        " none is specified, it will use all of them (except"
                        " the DEFAULT section).")
    parser.add_argument('-o', '--output-format', default='csv',
                        choices=['csv', 'html'],
                        help="What output format to use. Default is 'csv'.")
    args = vars(parser.parse_args())
    return args


def main():
    args = parse_args()
    if args['verbose']:
        LOG.setLevel(logging.INFO)
    try:
        config = launchpadstats.common.get_config(args['config'])
        tables = list()
        if args['table_name']:
            params = dict(config.items(args['table_name']))
            table_type = params.get('table-type')
            tables.append(launchpadstats.tables.get_table(table_type, params))
        else:
            for section in config.sections():
                params = dict(config.items(section))
                table_type = params.get('table-type')
                tables.append(launchpadstats.tables.get_table(table_type,
                                                              params))

        # TODO(mkollaro) to be parallelized
        for table in tables:
            table.generate()

        print_tables(tables, args['output_format'])

    except Exception as e:
        sys.stderr.write("%s: %s\n" % (type(e).__name__, e))
        if args['verbose']:
            traceback.print_exc()
        sys.exit(1)


def print_tables(tables, output_format):
    if output_format == 'html':
        print('<html>')
        for table in tables:
            if table.description:
                print('<h2>%s</h2>' % table.description)
            print(table.html())
        print('</html>')
    else:
        for table in tables:
            if table.description:
                print('# ' + table.description)
            print(table.csv())
            print()


main()
