#!/usr/bin/env python
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import logging
import argparse
import sys
import traceback

import stackalyticscli


logging.basicConfig()
LOG = logging.getLogger('stackalyticscli')


TABLES = ['group-summary', 'per-user-summary']

def parse_args():
    parser = argparse.ArgumentParser(description="Get Stackalytics data and"
        " create various types of tables out of them.")
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="Show logging output")
    parser.add_argument('-c','--config',
                        help="Configuration file, by default use 'config.ini'"
                        " in the project directory")
    parser.add_argument('-n', '--table-name', default='DEFAULT',
                        help="Which section name in the config file to use,"
                        " the default value is 'DEFAULT'")
    args = vars(parser.parse_args())
    return args


def get_table(params):
    table_type = params.get('table-type', 'group-metrics')
    if table_type == 'group-metrics':
        return stackalyticscli.GroupMetricsTable(**params)
    elif table_type == 'user-metrics':
        return stackalyticscli.UserMetricsTable(**params)
    else:
        raise Exception("Unknown table type '%s'" % table_type)


def main():
    args = parse_args()
    if args['verbose']:
        LOG.setLevel(logging.INFO)
    try:
        config = stackalyticscli.get_config(args['config'])
        params = dict(config.items(args['table_name']))

        table = get_table(params)
        table.generate()
        print table.csv()

    except Exception, e:
        print e
        if args['verbose']:
            traceback.print_exc()
        sys.exit(1)


main()
